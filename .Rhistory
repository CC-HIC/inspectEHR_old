library(devtools)
load_all()
install.packages("RPostgres")
# survivor times (months)
s_times <- c(23, 41, 32, 83, 5, 62, 96, 71, 90, 54)
# order
s_times <- order(s_times)
# survivor times (months)
s_times <- c(23, 41, 32, 83, 5, 62, 96, 71, 90, 54)
# order
s_times <- s_times[order(s_times)]
mp_group <- c(6, 6, 6, 6, 7, 9, 10, 10, 11, 13, 16, 17, 19, 20, 22, 23, 25, 32, 32, 34, 35)
mp_censored <- c(0,0,0,1,0,1,0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1)
placebo <- c(1, 1, 2, 2, 3, 4, 4, 5, 5, 8, 8, 8, 8, 11, 11, 12, 12, 15, 17, 22, 23)
?install.packages
configure.args
getOption("configure.args")
getOption("configure.vars")
install.packages("RPostgres", configure.vars = "PKG_CONFIG_PATH=/usr/lib/pkgconfig")
install.packages("RPostgres", configure.vars = "LIB_DIR=/usr/lib/pkgconfig")
install.packages("RPostgres", configure.vars = "INCLUDE_DIR=/usr/lib/pkgconfig")
install.packages("RPostgres", configure.vars = "PKG_CONFIG_PATH=\"/usr/local/opt/libpq/lib/pkgconfig")
library(devtools)
load_all()
install.packages("pander")
load_all()
build()
library(devtools)
load_all()
document()
build()
library(devtools)
load_all()
document()
document()
load_all()
build()
document()
load_all()
build()
install.packages("~/Synology/developer/inspectEHR_0.4.0.tar.gz")
install.packages("~/Synology/developer/inspectEHR_0.4.0.tar.gz", repos = NULL, type = "source")
library(mclust)
library(devtools)
load_all()
ctn <- connect(system = "sqlite", file = "~/Synology/_data/hic/public/public_release_20180914.sqlite3")
tbls <- retrieve_tables(ctn)
hr <- tbls[["events"]] %>%
filter(code_name == "NIHR_HIC_ICU_0108") %>%
collect()
library(tidyverse)
hr <- tbls[["events"]] %>%
filter(code_name == "NIHR_HIC_ICU_0108") %>%
collect()
plot(density(hr$integer))
hist(hr$integer)
hr <- hr$integer
densityMclust(hr)
hrd <- densityMclust(hr)
library(devtools)
load_all()
hic_codes
qref
qref
qref %>% select(code_name) %>% arrange(code_name) %>% pull
library(tidyverse)
qref %>% select(code_name) %>% arrange(code_name) %>% pull
qref %>% select(code_name) %>% arrange(code_name) %>% pull -> hic_codes
vector(mode = "list", length = length(hic_codes))
?install_github()
qref
save(qref, file = "~/Desktop/qref.RData")
View(qref)
install.packages("rlang")
install.packages("rlang")
library(devtools)
load_all()
document()
build()
ctn <- connect(system = "sqlite", file = "~/Synology/_data/hic/public/public_release_20180914.sqlite3")
core <- make_core(ctn)
extract_2d
document()
load_all()
document()
build()
library(devtools)
document()
document()
load_all()
build()
load_all()
ks.test(rnorm(1000), rnowm(1000))
ks.test(rnorm(1000), rnorm(1000))
str(ks.test(rnorm(1000), rnorm(1000)))
ks.test(rnorm(1000), rnorm(1000))
ks.test(rnorm(1000), rnorm(1000))$statistic
qref
qref %>% filter(code_name == "NIHR_HIC_ICU_0049")
qref %>% filter(code_name == "NIHR_HIC_ICU_0049") %>% select(short_name)
c("a", "b")
c(c("a", "b"), "c")
append(c("a", "b"), "c")
?append
library(devtools)
document()
load_all()
build()
c("a", "a.meta")
grepl(pattern = "meta", c("a", "a.meta"))
document()
load_all()
build()
document()
load_all()
build()
document()
document()
load_all()
document()
build()
c("a", "b", "c") %in% "a"
c("a", "b", "c") == "a"
any(c("a", "b", "c") == "a")
any(c("a", "b", "c") %in% "a")
all(c("a", "b", "c") %in% "a")
load_all()
document()
load_all()
document()
build()
qref
dq_ref
library(devtools)
load_all()
qref
load_all()
qref
?daily_admissions
document()
load_all()
load_all()
document()
load_all()
load_all()
document()
load_all()
document()
build()
document()
load_all()
build()
load_all()
document()
build()
load_all()
build()
build()
load_all()
build()
build()
build()
library(devtools)
load_all()
build()
?ggsave
load_a
library(devtools)
document()
load_all()
build()
"thing" %in% c("thing", "thang")
qref %>% filter(code_name == "NIHR_HIC_ICU_0470") %>% select(primary_column) %>% pull
library(tidyverse)
qref %>% filter(code_name == "NIHR_HIC_ICU_0470") %>% select(primary_column) %>% pull
"real" %in% c("integer", "real")
c("real", "other") %in% c("integer", "real")
if("real" %in% c("integer", "real")) print("true")
if(c("real", "other") %in% c("integer", "real")) print("true")
build()
qref
View(qref)
?pull
build()
build()
?scale_fill_viridis_c
build()
?ggsave
build()
?ks.test
?vars()
library(tidyverse)
?vars()
library(devtools)
document()
build()
build()
document()
load_all()
document()
build()
?ks.test
build()
library(devtools)
build()
build()
library(devtools)
document()
load_all()
build()
library(devtools)
library(tidyverse)
cars
cars %>% ggplot(aes(speed)) + stat_ecdf()
cars %>% ggplot(aes(speed)) + stat_ecdf() + ggsave(filename = "~/Downloads/cars_demo.png", scale = 2, dpi = 300)
cars %>% ggplot(aes(speed)) + stat_ecdf() + ggsave(filename = "~/Downloads/cars_demo.png", dpi = 300)
cars %>% ggplot(aes(speed)) + stat_ecdf() + ggsave(filename = "~/Downloads/cars_demo.png", dpi = 72)
cars %>% ggplot(aes(speed)) + stat_ecdf() + ggsave(filename = "~/Downloads/cars_demo.pdf")
cars %>% ggplot(aes(speed)) + stat_ecdf() + ggsave(filename = "~/Downloads/cars_demo.svg")
install.packages("svglite")
library(cowplot)
install.packages("cowplot")
library(cowplot)
cars %>% ggplot(aes(speed)) + stat_ecdf()
names(cars)
cars %>% ggplot(aes(speed, dist, fill = dist)) + geom_tile()
cars %>% ggplot(aes(speed, dist, fill = dist)) + geom_tile() + scale_fill_viridis_c()
cars %>% ggplot(aes(speed, dist, fill = dist)) + geom_tile() + scale_fill_viridis_c(values = c(0, 50))
cars %>% ggplot(aes(speed, dist, fill = dist)) + geom_tile() + scale_fill_viridis_c() + lims(fill = c(0, 50))
?rescale
cars %>% ggplot(aes(speed, dist, fill = dist)) + geom_tile() + scale_fill_viridis_c(values = rescale(from = 0, to = 50))
cars %>% ggplot(aes(speed, dist, fill = dist)) + geom_tile() + scale_fill_viridis_c(values = scales::rescale(from = 0, to = 50))
colours
?cowplot
?scale_fill_viridis_c
?viridis_pal
viridis_pal()(9)
scales::viridis_pal()(9)
load_all()
load_all()
document()
build()
document()
load_all()
document()
build()
library(devtools)
library(tidyverse)
library(cowplot)
library(devtools)
library(tidyverse)
# Justification controls where the cells are anchored
df <- expand.grid(x = 0:5, y = 0:5)
df
df$z <- runif(nrow(df))
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) + geom_tile()
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal()
library(cowplot)
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal()
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c()
df$z <- runif(nrow(df), max = 5)
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c()
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(begin = 0, end = 5)
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(begin = 0, end = 0.5)
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c()
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(values = scales::rescale(x = df$z, to = c(0, 1)))
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(rescaler = function(x, to = c(0, 1), from = NULL) {
ifelse(x < 2,
scales::rescale(x,
to = to,
from = c(min(x, na.rm = TRUE), 2)),
1)})
?continuous_scale
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(rescaler = if_else(x < 2, scales::rescale(x, to = to, from = c(min(x, na.rm = TRUE), 2)), 1))
# default is compatible with geom_tile()
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(rescaler = function(x, to = c(0, 1), from = NULL) {
if_else(x < 2, scales::rescale(x, to = to, from = c(min(x, na.rm = TRUE), 2)), 1)
})
ggplot(df, aes(x, y, fill = z)) +
geom_tile() +
coord_equal() +
scale_fill_viridis_c(rescaler = function(x, to = c(0, 1), from = NULL) {
if_else(x < 2, scales::rescale(x, to = to, from = c(min(x, na.rm = TRUE), 2)), 1)
})
load_all()
document()
build()
document()
load_all()
build()
document()
load_all()
build()
load("~/Synology/developer/inspectEHR/tests/test_data.RData")
test_real_2d
attr(test_real_2d, "code_name")
load_all()
plot_hic(test_real_2d, path_name = "~/Downloads/", c("#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854"))
load_all()
plot_hic(test_real_2d, path_name = "~/Downloads/", c("#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854"))
load_all()
plot_hic(test_real_2d, path_name = "~/Downloads/", c("#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854"))
flag_all(test_real_2d)
